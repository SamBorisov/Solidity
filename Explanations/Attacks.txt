 -  -  - Logic of an Attacker -  -  - 
what benefit could I have if I know this function update start from x to y, can I use a call for another function to take advantage of this state update? 


   Security Attacks - passive / active
      Ransomware - locks , encrupts..data for money 
      cryptojacking - using other people devices for minning without them knowing
      Supply chain - insert  toxic code into developers without them knowing
      DDoS - server is down/slowed cuz A LOT hacked PCs/bots trying to enther and do something at the same time
      Phishing - trick victims to reveal passords/keyworkds or any private information (emial/fake links..)
      50% attack - trying to take over the network with having control over more then half of the network


$Flash Loans hacks:
Users can manipulate oracles with a lot of tokens
Users can liquidate or take advantage of governances 
Users can pump a price of a token and then play with it
It could be used as voting power and to propose a fake proposal
Re-entrancy Attacks
Pass data as approve function
Take advantage of the fee and borrowers (use msg.sender, not address receiver)
Protect:
(Add logic to function that could be damaged from borrowing a modifier areFundsLended)
This way it checks if the money is borrowed and does not execute.
Make sure people cannot do re-entracy and repay with another loan.
When borrowing, make sure only the lending protocol can call your function & only you can call it
On ERC20, require(IERC20(token).transferFrom(address(receiver), this.address, amount + fee) so the borrower needs just to give allowance and you will make sure the money are returned.
Check that the borrower returns - keccack256("ERC3156FlashBorrower.onFlashLoan")



$Inflation attack:
If a vault is using the balanceOf(token) for calculation on shares:
A hacker can fronton a deposit when depositing 1 amount for 1 share, then sending the vault tokens with transfer (amount of the other user, lets say 100)
Then when the user deposits the 100 shares he will not have shares and since the hacker has all the shares he can withdraw all tokens!
Also, it is possible for sandwich attacks if we are using shares
__!!! Do not use BalanceOf(), use inside contract counters for balances and shares
- Could also use ‘dead shares’ the contract deposits 1st
- Min shares - user cannot gain 0 shares when depositing


$Permit + WETH attack:
If we have a fallback function  that executes (normal deposit) in WETH
In our contract where we use a permit, but the WETH doesn’t have a permit (if one user already allowed the contract to use all tokens) the attacker could use this fallback function 
(so permit won’t ever) in that way, he can increase the balance to himself and then withdraw it (passing himself as a spender)
__!! Check for a fallback function before working with tokens with a permit (don’t work with all tokens)
__If the function should allow the contract to spend the tokens, then don’t use spender as input on the function
__Check that the permit function  is executed, not any other fallback



$Approval attack:
If the user approves more tokens and then wants to approve less, the spender could front-run his second allowance and use all tokens before the second allowance and then use the tokens from the second allowance 
___! Use safeDecreseAllowance from openZeppelin so it checks the current allowance


$Re-Enracny:
Cross re-entrancy attack: having 2 functions, one we call get something from it (ETH), trigger a receive function and call another (while the 1st one is still not complete and not updated the state of our balance ‘even if we have re-entrancy Gard modifier’)
Cross contract also works - be aware of storage and how contracts interact with each other.
Read only re-entrancy - if our functions depend on a view function, then that view function (if the state in it is not updated ’the view function will return the same’ before the external function ends, there is a way to call other/same function that relays on that view function, even if the view function is not correct) - if we need the output of the function we can save it in a var, then update it and then make the call for sending ETH.



try {} catch - if we expect to have a revert somewhere in our code we can do try/catch and execute a different logic if some functions fails or not
$Try-Catch HACK: if there's a ban function on user (but he uses smart contract and has receive function that always reverts) if our ban send him remaining ETH it will revert always and we won't be able to ban it!
By using try catch we can avoid this kind of hack and users can be banned!


$Tornado cash hack:
We create the address is calculated by deployer address and nonce - if the was 1st deployed contract then it is 0. Once a user calls self-destruct to a contract then the nonce of this contract won’t count so if he had 1 deployed contract and call self-destruct the nonce will be still 0. 
He proposed a nice contract with address that got approved for the main contract with delegate call, then he deleted this contract and deployed new one with bad code with the same address, that way he managed to hack the contracts!
   How to prevent?
- Carefully choose addresses of proposes and to who they are
- Avoid contracts with self-destruct
- Add event listener to the contract if self-destruct is called and if so, update the main contract to not work with this address
- Avoid delegate calls 
