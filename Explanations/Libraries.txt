Libraries and how to use them:
https://forum.openzeppelin.com/t/list-of-solidity-libraries-in-the-wild/2250

                  Stadnarts:
- Tokens:
  - ERC20 - Normal token that's tradable, not unique
  - ERC721 - Special token that's tradable, unique (NFT)
  - ERC1155 - Special token that's tradable, could have copies (fungible)

  - ERC20PresetMinterPauser - burnable, mintable, pausable token ERC20
  - ERC20Permit - used for allowing spending token with signature (permit function)

 - SafeMath - To prevent overflows and underflows using this library (not needed in Solidity 0.8.0 and above, cuz we have it by default)
 - SafeMathInt - check if int is positive, if not reverts (cuz could make it -10 = 10, not safe, Other checks if there is no overflow. Cuz unit could be bigger in positive numbers than int)
 - TransferHelper - To make sure your transfer was executed correctly
Secure double-spending, attacks, does not return bool false when a transaction fails

 - AccessControl - for setting up roles for users and giving them control over specific functions
 - Ownable - for having an owner of the contract who is the deployer

 - EIP712 - using a domain separator, name, version, chain ID, and address of the contract
The main goal of EIP-712 is to ensure that both the message sender and the message receiver interpret the data in the same way. 
It defines a standard way to structure, encode, and hash data before it is signed, ensuring consistency across different implementations.

 - ECDSA - used to verify signatures, recover a signer from a signature, and more
 - BLS - ways to save signatures that take less space in the blockchain, used by the validators 

 - ERC165 - standard for interfaces - check if contract supports an interface - good for a marketplace to see if a contract by user supports the basic function:
For example, an ERC721 can use the marketplace for the contract, the buttons to work, and so on. (has the base functions)
Note: If the function logic is different the interface function will still pass (say it supports the interface) if it has the same name and input!

 - ERC4626 - tokenized vault standard
Using asset (one ERC20), it gives into the ERC4626 and mints shares (based on total supply and other things). 
The balance of ERC4626 represents the shares, and we can make a view function that calc, how many assets of the ERC20 that is! Venerable to Inflation attack!

 - ERC3156 - flash loans
Only contracts can work with this, no EOA.
The user creates a contract and function that executes logic and calls this function inside the FlashLoan, 
so the FlashLoan gives value, executes this function, and then checks if the values are received back to the FlashLoan contract. If it is not, all reverts!

 - Initializable - base contract for initializing upgradable contract, works as constructor and the idea is to have a function that is called only once
initializer modifier idea is to be in the child component only
for all parents, we should call the modifier onlyInitializing
reinitializer - update the version of the contract
We can add a constructor/function that has _disableInitializers - so we can be sure the contract won't have other versions 


  - ERC2771 - meta transactions
For a contract to use meta transactions, it needs to implmenate the logic in the deplayment or be upgradable!

  - ERC4337 - account abstraction
Stadnart for UserOperation, that contains all the information needed to figure out what transaction the user intends to perform



Testing:

 - Remix Assert Library (remix_tests.sol)
Helps to test the contract, to check if the function is working as expected:
Assert.ok(value[, message])
Assert.equal(actual, expected[, message])
Assert.notEqual(actual, expected[, message])
Assert.greaterThan(value1, value2[, message])
Assert.lesserThan(value1, value2[, message])
