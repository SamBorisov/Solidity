 _______________ Solidity Example Questions _______________ 


2 artifacts produced by the Solidity compiler when compiling a smart contract?
   The ABI (application binary interface) -The ABI defines the interface of a smart contract, i.e the set of functions that can be called from outside the smart contract. 
   The ABI only defines the function signatures (function names, argument types and return types) but not their implementation. The ABI also defines the events of the contract.
   The ABI is used outside the smart contract by Ethereum client libraries like web3 to interact with the smart contract.
    The bytecode

------------------------------------------------

      Does the EVM understands Solidity?
No. The EVM only understand bytecode, which must first be produced by Solidity, outside of the blockchain.

------------------------------------------------

        What is the EVM bytecode?
The EVM bytecode is a series of EVM elementary instructions called opcodes. 
These opcodes define very simple simple operations like adding 2 numbers (ADD), loading data from memory (mload), etc… 
There are more than 100 of these opcodes defined in the Ethereum yellow paper. Coding directly with opcodes would be very tedious, 
so we need higher languages like Solidity to help us reason at a higher level of abstraction.

------------------------------------------------

      What are the 2 APIs used to interact with a smart contract?
eth_sendTransaction (transaction) and eth_call (call). 
Transactions cost money (gas) and can modify the blockchain. 
Calls do not cost money, cannot modify the blockchain, but can return a value contrary to transactions.

------------------------------------------------

   Gas:
Gas is an abstract unit used to pay miners when sending a transaction on the Ethereum network.
Gas is paid in ether using the formula: ether cost = gasPrice * gas, where gas represents the gas cost of the execution of a transaction. gasPrice is in wei / gas, generally express is Gwei. A transaction also specifies a gasLimit parameter, which specify a maximum number of gas that can be paid by a transaction. Without this, a transaction could potentially drain an account of all its Ether.
The transaction is stopped, and all state changes are reverted if there is not enough gas
The sender of the transaction pays the gas.

------------------------------------------------

            Famous smart contract framework and tools for Solidity
  Truffle
  Foundry
  Hardhat
  OpenZeppelin
  Remix - online IDE
  Ganeche  - Javascript Ethereum client can we use to develop Solidity on a local blockchain

------------------------------------------------

What do you need to deploy a smart contract to the Ethereum network??
    bytecode of smart contract
    an Ethereum address with enough Ether
    A wallet to sign the transaction
    A tool to create the transaction and coordinate the signing process with the wallet
    
------------------------------------------------
        
Famous Ethereum wallets                           netowkrs you can deplay Solidity smart contracts
    Metamask  
    MyEtherWallet                                                 Mainnet
    Ledger                                                        Ropsten
    Trezor                                                        Kovan

------------------------------------------------
    
                       Give 3 ways to save gas
Put less data on-chain
Use events instead of storage
Optimal order for variable declaration.

------------------------------------------------

         How would optimally order uint128, bytes32 and another uint128 to save gas?
uint128
uint128
bytes32

The EVM stores variable in 32-bytes slot. 
However Solidity is smart enough to pack into a single slot several variables if they can fit together. 
For this optimization to work, packed variables have to be defined next to each other. 
In the above example, the 2 uint128 will be placed in the same 256 bit slots (128 + 128 = 256).

------------------------------------------------

           How many event fields can be marked indexed?
3 maximum.   

        Is it possible for a smart contract to read the events emitted before?
No. Only external entities can queries events.

        Is it possible to delete or modify a past event?
No. Events are immutable.

        In Solidity, how to do like a Javascript console.log for debugging?
There is no equivalent in Solidity, but you can use events, even if its not designed for this.


------------------------------------------------

            How to cancel a transaction?
 
Once a transaction has been sent, nobody can prevent it from being mined by a miner. B
ut you can still send another transaction preventing the first one from working IF its mined before the first one. 
This second transaction will have the following properties:

it will have the same nonce (i.e an incrementing integer that is sent in each transaction, specific to each Ethereum address)
it will have a higher gasPrice than the first transaction
it will send a tiny amount of Ether to another address
Let’s review why we need these. 
The same nonce means that the first transaction to be mined will prevent the other one from being mined: miners only mine transactions 
whose nonce is higher than the previous nonce for the address that has signed the transaction.

The higher gasPrice means a higher reward for miner, so if a miner has the choice to mine the second or the first transaction he will choose the second one.

And finally, sending a tiny amount of Ether is just because a transaction needs to do something on the blockchain, 
so we just do something that is useless but doesn’t cost us much. 
Actually, you could even call a read-only function in any smart contract, in a transaction, and you wouldn’t even need to send this tiny amount of Ether. 
You would still need to cover the gas fee in every case.  

------------------------------------------------

      What are the 2 kind of assembly in Solidity?
Functional and instructional. 
Functional uses functions, whereas instructional is a raw series of opcodes. Most people use the functional style.

------------------------------------------------

         What is a re-entrancy attack?
A re-entrancy attack happen when a contract A calls a contract B which call back the calling function on contract A to perform some malicious effect.

------------------------------------------------

How to prevent against a re-entrancy attack?

          Solution 1: Decrease balances / do other state variable update BEFORE calling the other contract.
          Solution 2: Put in place re-entrancy guard with a variable that knows when a call is the second in the stack
          Solution 3: Limit the gas available to the called contract. If using transfer(), this is done automatically:

------------------------------------------------

      Is it possible to send a transaction without requiring users to pay gas?

Yes. You would ask users to first sign a message on the frontend. 
Then the message and signature would be sent to a centralized backend (your app, off-chain) 
that would create a transaction and embed the payload (message + signature) into it.
That means that gas fees will be covered by the wallet of the app, instead of the user wallet. 
On-chain, a smart contract will verify the validity of the signature and perform on operation on behalf of the user.

------------------------------------------------

         What is the ABIEncoderV2 pragma statement?
This is an pragma statement is used to enable experimental features not yet enabled in standard Solidity. 
For example it enables to return a struct from a function called externally, which is not possible in standard Solidity yet (0.5.x).

------------------------------------------------

          Is it safe to use the ABIEncoderV2 pragma statement in production?
No. It should only be used in development, not in production.

------------------------------------------------

    How can we import global symbols from one source file to another?
We can do this by using import statements.

------------------------------------------------

      What is the difference between import "./x" as x; and import "x" as x;?
We import "./x" as x; - imports a file x from the same directory as the current file.
Also, we import "x" as x; - in a global “include directory.

------------------------------------------------

         What does the file generated by the Solidity compiler contain?
The Solidity compiler automatically creates a JSON file that contains the contract metadata (information about the current contract).

------------------------------------------------

      Can I create several constructors with a different number of parameters in a smart contract?
No. Only one constructor is allowed, and this means overloading is not supported.
      Can we create a private constructor? What will happen when we create a private constructor?
No. We get an error: TypeError: The Constructor must be public or internal.

------------------------------------------------

       How can we create a contract?
Contracts can be created “from outside” via Ethereum transactions or from within Solidity contracts.

------------------------------------------------

      How to create a smart contract from another smart contract?
If the contract wants to create another contract, the source code (and the binary) of the created contract has to be known to the creator.
This means that cyclic creation dependencies are impossible.

------------------------------------------------

         What does it mean when talking about state changing?
By changing the state, they understand how to:

Create/modify state variables

Use <address>.balance

 Get access to any member of a block, tx, msg (except for msg.sig and msg.data)

Use the built-in assembly that contains a certain operation code

Create a contract

Call an external function that is not pure

------------------------------------------------

       What kinds of memory do you know for storing data of a smart contract?
The Ethereum virtual machine has three storage areas: storage, memory, and stack.
Also, the returndata (returned from the value function) and calldata are allocated.

------------------------------------------------

      In which case do we use memory type?
We use memory to store temporary variables.

------------------------------------------------

      What data is stored in storage?
State variables and, by default, all other local variables are stored in the storage.

------------------------------------------------

      In what type of memory are the function parameters stored by default? Can we change the location of the not return parameters? If so, what are the limits for this?

The default location for the parameters: memory.
Forced data location: parameters (not return) of external functions: calldata. You can change the location of the not return parameters using the keyword storage.
However, you can do this only for internal functions, and the parameters must be of type Array or Struct.

------------------------------------------------

      What is calldata ?
It is a non-modifiable, non-persistent area where function arguments are stored. 
Function parameters (not return parameters) of external functions are forced to calldata and behave mostly like memory .

------------------------------------------------

      What is stack?
Stack is a working memory and local variables.

 _______________ Important Terms to Learn and Explain _______________ 

   Zk-SNARKS - A zk-SNARK is a zero-knowledge proof protocol where one can prove they possess certain information 
   without revealing it and without any interaction between the parties proving and verifying the information.
   
   ----------------------

  Optimistc rollups vs zk rollups - Optimistic rollups assume transactions are valid until they're proven false. 
  zk-Rollups, on the other hand, instantly verify transactions and generate cryptographic validity proofs. 
  The proofs can be generated using zk-SNARKs or another type of zero-knowledge proof technology, zk-STARKs.
  
  ----------------------

   ^Zero-knowledge applications - The most well-known example of zk-SNARKs is their use in shielding cryptocurrency transactions. 
   Zcash is the first widespread application of zk-SNARKs. This privacy coin allows users to choose between private and transparent addresses.
   When a user chooses a private address, zk-SNARKs shield the transaction data.
Other blockchain projects are also using zk-SNARKs. Ethereum started working on integrating Zcash and zk-SNARKs in 2017. That same year, 
Zcash partnered with JP Morgan Chase (NYSE:JPM) on building a blockchain-based payment system with zk-STARKs.
While zk-SNARKs are currently used to privatize financial transactions, that's not their only application. In the future,
we could see them used to protect people's data during online activity.
   
   ----------------------

   DAO - A decentralized autonomous organization (DAO) is an emerging form of legal structure that has no central 
   governing body and whose members share a common goal to act in the best interest of the entity.
   Popularized through cryptocurrency enthusiasts and blockchain technology, DAOs are used to make decisions in a bottoms-up management approach.
   
   ----------------------

  MEV - Maximal extractable value (MEV) refers to the maximum value that can be extracted from block production in excess of the standard block 
  reward and gas fees by including, excluding, and changing the order of transactions in a block
  
  ----------------------

  flashloans - Flash loans are a relatively new form of uncollateralized loans available to traders on some 
  decentralized finance (DeFi) protocols based on a blockchain network (Ethereum).
  -Flash loans are smart contracts. This is a feature of blockchain technology that prevents funds from leaving one account to the other 
  unless certain obligations have been fulfilled.
  -When a flash loan has been issued, the smart contract rules ensure that the borrower pays back the loan before the transaction ends. 
  If this condition isn't met, the smart contract reverses the transaction and it's like the loan never happened in the first place.
      
  ----------------------