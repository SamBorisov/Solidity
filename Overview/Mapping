// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.7.0;

contract MyCon{

 //   mapping(key => value) mymapping;
    mapping(uint => string)public FavBook;
    
       constructor()  {                 
        FavBook[1] = "Rich Poor Dad";
        FavBook[2] = "The Laws of Human Nature";
        FavBook[3] = "Strech";
    }
    // just some mapping data into the blockchain
}






contract MyCon2{

    mapping(uint=> Book) public books;
    
      struct Book{
        string title;
        string author;
    }
    
     function addBook (uint _id, string memory _titile, string memory _author) public{
        books[_id]=Book(_titile,_author);
    }
    //mapping num with struct for book for adding a book 'memory' for remebering
    
   // mapping (key => mapping(key2 => value2)) public mymapping2;
    mapping (address => mapping(uint => Book)) public AddressBooks;
    
    
    
    
    function addmybook(uint _id, string memory _titile, string memory _author)public{
        AddressBooks[msg.sender][_id] = Book(_titile, _author);
    }
    //double mapping for adding book on ower address
}





contract  MyCon3{
    
    mapping(address=>uint) public myMap;
    
    function get(address _addr) public view returns (uint){ //get infro in mapping not need if mapping is public and don't ahve other reqires
        return myMap[_addr];
    }
    
    function set(address _addr , uint _i) public {          //set the num into the the addres we choose 
        myMap[_addr] = _i;
    }
    
    function remove (address _addr) public {                //delete a num into a mapping
        delete myMap[_addr];
    }
}
